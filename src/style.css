*{margin: 0;padding: 0;}
*{box-sizing: border-box;}
*::after{box-sizing: border-box;}
*::before{box-sizing: border-box;}
ul,ol{list-style: none;}
a{color: inherit;text-decoration: none;}
/* 对于按标签设置其颜色为隐藏的颜色，父元素什么颜色，a标签就是什么颜色，并且不要下划线*/
input{font: inherit}
*{outline: none}
/* 让input中的属性进行继承，也就是input中的输入的内容的样式会得到继承 */
body{
    font-size: 12px;
    line-height: 1.5;
}

/* layout */

.page{
    display: flex;
    height: 100vh;
    /* 一个元素的高度就是内部文档流的高度，这里设置的高度为视口高度 */
}
.page > aside{
    width: 200px;
    display: flex;
    flex-direction: column;
}
.page > main{
    flex-grow: 1;
}

/* aside */

.page aside > .newSong{
    text-align: center;
    padding: 10px;
}
.page aside > .newSong.active{
    background: #4d4b4b4d;
}
#songList-container{
    flex-grow: 1;
}
.page aside .songList{
    /* 加上上面一句就能实现songList自动的向两边延伸，延伸后的话，歌单和长传区域就能分开了。 */
    text-align: left;
    border-top: 1px solid rgb(103, 105, 107);
}
.page aside .songList li{
    padding: 10px;
    border-bottom: 1px solid #ddd;
    margin-left: 10px;
    margin-right: 10px;
}
.page aside .songList > li.active{
    background: #4d4b4b4d;
}

.draggable {
    text-align: center;
    border-radius: 4px;
    border: 2px dashed #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    /* width: 200px; */
    flex-direction: column;
}
.clickable{
    cursor: pointer;
    /* 加上这一句就能实现鼠标变为手 */
    /* width: 100%; */
    /* 宽度与父元素的宽度一样 */
    padding: 20px 20px;
    /* 这里的padding撑起了父元素的高度,所以这里的按钮宽度和拖拽区域宽高都被子元素的padding撑起来了 */
}


/* main */

.page > main {
    padding-top: 20px;
    background-color: #4d4d4d4d;
    padding-left: 20px;
}
.form{
    font-size: 14px;
}
.form input[type=text]{
    /* 对input中输入的内容设置样式 */
    padding: 3px 8px;
    border-radius: 5px;
    border: 1px solid #ddd;
    height: 30px;
}
.form > .row{
    margin: 20px 0;
    display: flex;
}
.form > .row > label{
    width: 4em;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-right: 5px;
}
.form > .row.actions{
    margin-left: calc(4em + 5px);
    /* 这里就是设计按钮与上面的输入框进行左对齐 */
}
.form input[type=button],
.form input[type=submit],
.form button{
    height: 30px;
    padding-left: 10px;
    padding-right: 10px;
    border-radius: 5px;
    background-color: white;
}

/* loading */
@keyframes loading{
    0%{
        transform:scale(1);
    }
    100%{
        transform:scale(0.1);
    }
}
.set-loading{
    visibility: hidden;
    position: fixed;
    top:0;
    left: 0;
    /* 到最顶部和左边的距离为0 */
    background-color: rgba(0,0,0,0.2);
    width: 100%;
    height: 100%;
    z-index: 1;
    /* pointer-events: none; */
    /* 阻止loading的遮挡动作 */
}
.set-loading.active{
    visibility: visible;
}
.set-loading::before{
    content: '';
    display: block;
    position: absolute;
    height: 100px;
    width: 100px;
    background: green;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    margin-top: -50px;
    margin-left: -50px;
    /* 由于这个圆圈的长宽是100px，所以在进行居中的时候使用-50px */
    animation: loading 1s infinite alternate-reverse;
    animation-timing-function: linear;
    /* 指定动画进行变化的时候通过以上指定的变化的动作，做animation操作，具体的话可以看MDN
    loading是指定的操作变化，infinite表示无限的循环，alternate-reverse表示动作的反动
    linear表示进行线性变化，但是这些属性的填写有顺序，具体的顺序需要看MDN
    */
}